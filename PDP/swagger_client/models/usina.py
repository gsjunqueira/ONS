# coding: utf-8

"""
    API para Programação Diária de Produção (PDP).

    API do PDP para obtenção de dados e informações sobre programação diária de produção.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Usina(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codigo': 'str',
        'nome': 'str',
        'tipo': 'str',
        'prioridade': 'int',
        'dado_insumo_patamar': 'list[DadoInsumoPatamar]'
    }

    attribute_map = {
        'codigo': 'Codigo',
        'nome': 'Nome',
        'tipo': 'Tipo',
        'prioridade': 'Prioridade',
        'dado_insumo_patamar': 'DadoInsumoPatamar'
    }

    def __init__(self, codigo=None, nome=None, tipo=None, prioridade=None, dado_insumo_patamar=None):  # noqa: E501
        """Usina - a model defined in Swagger"""  # noqa: E501
        self._codigo = None
        self._nome = None
        self._tipo = None
        self._prioridade = None
        self._dado_insumo_patamar = None
        self.discriminator = None
        self.codigo = codigo
        self.nome = nome
        if tipo is not None:
            self.tipo = tipo
        if prioridade is not None:
            self.prioridade = prioridade
        if dado_insumo_patamar is not None:
            self.dado_insumo_patamar = dado_insumo_patamar

    @property
    def codigo(self):
        """Gets the codigo of this Usina.  # noqa: E501


        :return: The codigo of this Usina.  # noqa: E501
        :rtype: str
        """
        return self._codigo

    @codigo.setter
    def codigo(self, codigo):
        """Sets the codigo of this Usina.


        :param codigo: The codigo of this Usina.  # noqa: E501
        :type: str
        """
        if codigo is None:
            raise ValueError("Invalid value for `codigo`, must not be `None`")  # noqa: E501

        self._codigo = codigo

    @property
    def nome(self):
        """Gets the nome of this Usina.  # noqa: E501


        :return: The nome of this Usina.  # noqa: E501
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """Sets the nome of this Usina.


        :param nome: The nome of this Usina.  # noqa: E501
        :type: str
        """
        if nome is None:
            raise ValueError("Invalid value for `nome`, must not be `None`")  # noqa: E501

        self._nome = nome

    @property
    def tipo(self):
        """Gets the tipo of this Usina.  # noqa: E501


        :return: The tipo of this Usina.  # noqa: E501
        :rtype: str
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo):
        """Sets the tipo of this Usina.


        :param tipo: The tipo of this Usina.  # noqa: E501
        :type: str
        """

        self._tipo = tipo

    @property
    def prioridade(self):
        """Gets the prioridade of this Usina.  # noqa: E501


        :return: The prioridade of this Usina.  # noqa: E501
        :rtype: int
        """
        return self._prioridade

    @prioridade.setter
    def prioridade(self, prioridade):
        """Sets the prioridade of this Usina.


        :param prioridade: The prioridade of this Usina.  # noqa: E501
        :type: int
        """

        self._prioridade = prioridade

    @property
    def dado_insumo_patamar(self):
        """Gets the dado_insumo_patamar of this Usina.  # noqa: E501


        :return: The dado_insumo_patamar of this Usina.  # noqa: E501
        :rtype: list[DadoInsumoPatamar]
        """
        return self._dado_insumo_patamar

    @dado_insumo_patamar.setter
    def dado_insumo_patamar(self, dado_insumo_patamar):
        """Sets the dado_insumo_patamar of this Usina.


        :param dado_insumo_patamar: The dado_insumo_patamar of this Usina.  # noqa: E501
        :type: list[DadoInsumoPatamar]
        """

        self._dado_insumo_patamar = dado_insumo_patamar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Usina, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Usina):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
