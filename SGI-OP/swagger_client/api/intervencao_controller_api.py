# coding: utf-8

"""
    Integração com o SGI-OP

    Api de integração com os dados dos SGI-OP.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IntervencaoControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def consultar_dados_dominios_intervencao(self, tipo, **kwargs):  # noqa: E501
        """Realiza a obtenção dos domínios em função do tipo recebido.  # noqa: E501

        Realiza a obtenção dos domínios em função do tipo recebido. Os tipos de domínios são utilizados como filtro da API de intervenções (/sgi/intervencoes): <li>1 - AGENTES <li>2 - UF <li>3 - ESTADO_ATUAL <li>4 - CENTRO_RESPONSAVEL <li>5 - MALHA <li>6 - TIPO <li>7 - CARACTERIZACAO <li>8 - NATUREZA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.consultar_dados_dominios_intervencao(tipo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tipo: tipo domímino a ser recuperado. (required)
        :return: RespostaConsultaDominiosDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.consultar_dados_dominios_intervencao_with_http_info(tipo, **kwargs)  # noqa: E501
        else:
            (data) = self.consultar_dados_dominios_intervencao_with_http_info(tipo, **kwargs)  # noqa: E501
            return data

    def consultar_dados_dominios_intervencao_with_http_info(self, tipo, **kwargs):  # noqa: E501
        """Realiza a obtenção dos domínios em função do tipo recebido.  # noqa: E501

        Realiza a obtenção dos domínios em função do tipo recebido. Os tipos de domínios são utilizados como filtro da API de intervenções (/sgi/intervencoes): <li>1 - AGENTES <li>2 - UF <li>3 - ESTADO_ATUAL <li>4 - CENTRO_RESPONSAVEL <li>5 - MALHA <li>6 - TIPO <li>7 - CARACTERIZACAO <li>8 - NATUREZA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.consultar_dados_dominios_intervencao_with_http_info(tipo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tipo: tipo domímino a ser recuperado. (required)
        :return: RespostaConsultaDominiosDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tipo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_dados_dominios_intervencao" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tipo' is set
        if ('tipo' not in params or
                params['tipo'] is None):
            raise ValueError("Missing the required parameter `tipo` when calling `consultar_dados_dominios_intervencao`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tipo' in params:
            path_params['tipo'] = params['tipo']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/sgi/dominios/{tipo}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RespostaConsultaDominiosDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def consultar_historico_dados_execucao(self, identificador_ons, **kwargs):  # noqa: E501
        """Realiza a obtenção do historico e dados de execução da intervenção com base no Identificador ONS informado  # noqa: E501

        Realiza a obtenção do historico e dados de execução da intervenção com base no Identificador ONS informado  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.consultar_historico_dados_execucao(identificador_ons, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identificador_ons: Identificador ONS informado a ser informado. (required)
        :return: ResultadoHistoricoDadosExecucaoIntervencaoDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.consultar_historico_dados_execucao_with_http_info(identificador_ons, **kwargs)  # noqa: E501
        else:
            (data) = self.consultar_historico_dados_execucao_with_http_info(identificador_ons, **kwargs)  # noqa: E501
            return data

    def consultar_historico_dados_execucao_with_http_info(self, identificador_ons, **kwargs):  # noqa: E501
        """Realiza a obtenção do historico e dados de execução da intervenção com base no Identificador ONS informado  # noqa: E501

        Realiza a obtenção do historico e dados de execução da intervenção com base no Identificador ONS informado  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.consultar_historico_dados_execucao_with_http_info(identificador_ons, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identificador_ons: Identificador ONS informado a ser informado. (required)
        :return: ResultadoHistoricoDadosExecucaoIntervencaoDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identificador_ons']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_historico_dados_execucao" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identificador_ons' is set
        if ('identificador_ons' not in params or
                params['identificador_ons'] is None):
            raise ValueError("Missing the required parameter `identificador_ons` when calling `consultar_historico_dados_execucao`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador_ons' in params:
            path_params['identificadorONS'] = params['identificador_ons']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/sgi/intervencoes/historico-execucao/{identificadorONS}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoHistoricoDadosExecucaoIntervencaoDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def consultar_intervencoes_sgi(self, **kwargs):  # noqa: E501
        """Realiza a obtenção das intervenções com base no filtro recebido.  # noqa: E501

        Realiza a obtenção das intervenções com base no filtro recebido.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.consultar_intervencoes_sgi(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filtro_numero_ons: Número da intervenção no ONS.
        :param str filtro_numero_agente: Número do agente.
        :param datetime filtro_data_inicio: Data de Início  no formato yyyy-mm-dd'.
        :param datetime filtro_data_fim: Data fim  no formato yyyy-mm-dd'.
        :param list[str] filtro_agentes_solicitantes: Listagem com os agentes solicitantes. A lista de agentes pode ser obtida em /sgi/dominios/{tipo} (Tipo 1).
        :param list[str] filtro_u_fs: Listagem com as unidades federativas. A lista de UFs pode ser obtida em /sgi/dominios/{tipo} (Tipo 2).
        :param list[int] filtro_situacoes: Lista com as situacoes. A lista de Situações pode ser obtida em /sgi/dominios/{tipo} (Tipo 3).
        :param str filtro_centro_responsavel: Centro responsável. A lista dos Centros pode ser obtida em /sgi/dominios/{tipo} (Tipo 4).
        :param int filtro_malha: Malha da intervenção. A lista de Malhas pode ser obtida em /sgi/dominios/{tipo} (Tipo 5).
        :param int filtro_tipo: Tipo da intervenção. A lista de Tipos pode ser obtida em /sgi/dominios/{tipo} (Tipo 6).
        :param int filtro_caracterizacao: Caracterização da intervenção. A lista de Caracterizações pode ser obtida em /sgi/dominios/{tipo} (Tipo 7).
        :param int filtro_natureza: Natureza da intervenção. A lista de Naturezas pode ser obtida em /sgi/dominios/{tipo} (Tipo 8).
        :return: RespostaConsultaIntervencaoDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.consultar_intervencoes_sgi_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.consultar_intervencoes_sgi_with_http_info(**kwargs)  # noqa: E501
            return data

    def consultar_intervencoes_sgi_with_http_info(self, **kwargs):  # noqa: E501
        """Realiza a obtenção das intervenções com base no filtro recebido.  # noqa: E501

        Realiza a obtenção das intervenções com base no filtro recebido.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.consultar_intervencoes_sgi_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filtro_numero_ons: Número da intervenção no ONS.
        :param str filtro_numero_agente: Número do agente.
        :param datetime filtro_data_inicio: Data de Início  no formato yyyy-mm-dd'.
        :param datetime filtro_data_fim: Data fim  no formato yyyy-mm-dd'.
        :param list[str] filtro_agentes_solicitantes: Listagem com os agentes solicitantes. A lista de agentes pode ser obtida em /sgi/dominios/{tipo} (Tipo 1).
        :param list[str] filtro_u_fs: Listagem com as unidades federativas. A lista de UFs pode ser obtida em /sgi/dominios/{tipo} (Tipo 2).
        :param list[int] filtro_situacoes: Lista com as situacoes. A lista de Situações pode ser obtida em /sgi/dominios/{tipo} (Tipo 3).
        :param str filtro_centro_responsavel: Centro responsável. A lista dos Centros pode ser obtida em /sgi/dominios/{tipo} (Tipo 4).
        :param int filtro_malha: Malha da intervenção. A lista de Malhas pode ser obtida em /sgi/dominios/{tipo} (Tipo 5).
        :param int filtro_tipo: Tipo da intervenção. A lista de Tipos pode ser obtida em /sgi/dominios/{tipo} (Tipo 6).
        :param int filtro_caracterizacao: Caracterização da intervenção. A lista de Caracterizações pode ser obtida em /sgi/dominios/{tipo} (Tipo 7).
        :param int filtro_natureza: Natureza da intervenção. A lista de Naturezas pode ser obtida em /sgi/dominios/{tipo} (Tipo 8).
        :return: RespostaConsultaIntervencaoDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filtro_numero_ons', 'filtro_numero_agente', 'filtro_data_inicio', 'filtro_data_fim', 'filtro_agentes_solicitantes', 'filtro_u_fs', 'filtro_situacoes', 'filtro_centro_responsavel', 'filtro_malha', 'filtro_tipo', 'filtro_caracterizacao', 'filtro_natureza']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_intervencoes_sgi" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filtro_numero_ons' in params:
            query_params.append(('filtro.numeroONS', params['filtro_numero_ons']))  # noqa: E501
        if 'filtro_numero_agente' in params:
            query_params.append(('filtro.numeroAgente', params['filtro_numero_agente']))  # noqa: E501
        if 'filtro_data_inicio' in params:
            query_params.append(('filtro.dataInicio', params['filtro_data_inicio']))  # noqa: E501
        if 'filtro_data_fim' in params:
            query_params.append(('filtro.dataFim', params['filtro_data_fim']))  # noqa: E501
        if 'filtro_agentes_solicitantes' in params:
            query_params.append(('filtro.agentesSolicitantes', params['filtro_agentes_solicitantes']))  # noqa: E501
            collection_formats['filtro.agentesSolicitantes'] = 'multi'  # noqa: E501
        if 'filtro_u_fs' in params:
            query_params.append(('filtro.uFs', params['filtro_u_fs']))  # noqa: E501
            collection_formats['filtro.uFs'] = 'multi'  # noqa: E501
        if 'filtro_situacoes' in params:
            query_params.append(('filtro.situacoes', params['filtro_situacoes']))  # noqa: E501
            collection_formats['filtro.situacoes'] = 'multi'  # noqa: E501
        if 'filtro_centro_responsavel' in params:
            query_params.append(('filtro.centroResponsavel', params['filtro_centro_responsavel']))  # noqa: E501
        if 'filtro_malha' in params:
            query_params.append(('filtro.malha', params['filtro_malha']))  # noqa: E501
        if 'filtro_tipo' in params:
            query_params.append(('filtro.tipo', params['filtro_tipo']))  # noqa: E501
        if 'filtro_caracterizacao' in params:
            query_params.append(('filtro.caracterizacao', params['filtro_caracterizacao']))  # noqa: E501
        if 'filtro_natureza' in params:
            query_params.append(('filtro.natureza', params['filtro_natureza']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/sgi/intervencoes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RespostaConsultaIntervencaoDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def consultar_situacao_importacao_lote(self, id, **kwargs):  # noqa: E501
        """Realiza a obtenção da situação de um lote de importação de intervençoes.  # noqa: E501

        Realiza a obtenção da situação de um lote de importação de intervençoes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.consultar_situacao_importacao_lote(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identificador do lote a ser verificado. (required)
        :return: RespostaConsultaSituacaoImportacaoLoteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.consultar_situacao_importacao_lote_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.consultar_situacao_importacao_lote_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def consultar_situacao_importacao_lote_with_http_info(self, id, **kwargs):  # noqa: E501
        """Realiza a obtenção da situação de um lote de importação de intervençoes.  # noqa: E501

        Realiza a obtenção da situação de um lote de importação de intervençoes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.consultar_situacao_importacao_lote_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identificador do lote a ser verificado. (required)
        :return: RespostaConsultaSituacaoImportacaoLoteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_situacao_importacao_lote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_situacao_importacao_lote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/sgi/intervencoes/importar-lote/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RespostaConsultaSituacaoImportacaoLoteDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_lote_intervencoes(self, anexo9, anexo10, anexo2, arquivo_dados, anexo8, anexo4, anexo5, anexo3, anexo6, anexo7, anexo1, **kwargs):  # noqa: E501
        """Realiza o processo de upload dos arquivos para criação das intervenções em lote.  # noqa: E501

        Realiza o processo de upload dos arquivos para criação das intervenções em lote.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_lote_intervencoes(anexo9, anexo10, anexo2, arquivo_dados, anexo8, anexo4, anexo5, anexo3, anexo6, anexo7, anexo1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str anexo9: (required)
        :param str anexo10: (required)
        :param str anexo2: (required)
        :param str arquivo_dados: (required)
        :param str anexo8: (required)
        :param str anexo4: (required)
        :param str anexo5: (required)
        :param str anexo3: (required)
        :param str anexo6: (required)
        :param str anexo7: (required)
        :param str anexo1: (required)
        :return: RespostaUploadIntervencoesDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_lote_intervencoes_with_http_info(anexo9, anexo10, anexo2, arquivo_dados, anexo8, anexo4, anexo5, anexo3, anexo6, anexo7, anexo1, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_lote_intervencoes_with_http_info(anexo9, anexo10, anexo2, arquivo_dados, anexo8, anexo4, anexo5, anexo3, anexo6, anexo7, anexo1, **kwargs)  # noqa: E501
            return data

    def upload_lote_intervencoes_with_http_info(self, anexo9, anexo10, anexo2, arquivo_dados, anexo8, anexo4, anexo5, anexo3, anexo6, anexo7, anexo1, **kwargs):  # noqa: E501
        """Realiza o processo de upload dos arquivos para criação das intervenções em lote.  # noqa: E501

        Realiza o processo de upload dos arquivos para criação das intervenções em lote.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_lote_intervencoes_with_http_info(anexo9, anexo10, anexo2, arquivo_dados, anexo8, anexo4, anexo5, anexo3, anexo6, anexo7, anexo1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str anexo9: (required)
        :param str anexo10: (required)
        :param str anexo2: (required)
        :param str arquivo_dados: (required)
        :param str anexo8: (required)
        :param str anexo4: (required)
        :param str anexo5: (required)
        :param str anexo3: (required)
        :param str anexo6: (required)
        :param str anexo7: (required)
        :param str anexo1: (required)
        :return: RespostaUploadIntervencoesDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['anexo9', 'anexo10', 'anexo2', 'arquivo_dados', 'anexo8', 'anexo4', 'anexo5', 'anexo3', 'anexo6', 'anexo7', 'anexo1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_lote_intervencoes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'anexo9' is set
        if ('anexo9' not in params or
                params['anexo9'] is None):
            raise ValueError("Missing the required parameter `anexo9` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'anexo10' is set
        if ('anexo10' not in params or
                params['anexo10'] is None):
            raise ValueError("Missing the required parameter `anexo10` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'anexo2' is set
        if ('anexo2' not in params or
                params['anexo2'] is None):
            raise ValueError("Missing the required parameter `anexo2` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'arquivo_dados' is set
        if ('arquivo_dados' not in params or
                params['arquivo_dados'] is None):
            raise ValueError("Missing the required parameter `arquivo_dados` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'anexo8' is set
        if ('anexo8' not in params or
                params['anexo8'] is None):
            raise ValueError("Missing the required parameter `anexo8` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'anexo4' is set
        if ('anexo4' not in params or
                params['anexo4'] is None):
            raise ValueError("Missing the required parameter `anexo4` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'anexo5' is set
        if ('anexo5' not in params or
                params['anexo5'] is None):
            raise ValueError("Missing the required parameter `anexo5` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'anexo3' is set
        if ('anexo3' not in params or
                params['anexo3'] is None):
            raise ValueError("Missing the required parameter `anexo3` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'anexo6' is set
        if ('anexo6' not in params or
                params['anexo6'] is None):
            raise ValueError("Missing the required parameter `anexo6` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'anexo7' is set
        if ('anexo7' not in params or
                params['anexo7'] is None):
            raise ValueError("Missing the required parameter `anexo7` when calling `upload_lote_intervencoes`")  # noqa: E501
        # verify the required parameter 'anexo1' is set
        if ('anexo1' not in params or
                params['anexo1'] is None):
            raise ValueError("Missing the required parameter `anexo1` when calling `upload_lote_intervencoes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'anexo9' in params:
            local_var_files['anexo9'] = params['anexo9']  # noqa: E501
        if 'anexo10' in params:
            local_var_files['anexo10'] = params['anexo10']  # noqa: E501
        if 'anexo2' in params:
            local_var_files['anexo2'] = params['anexo2']  # noqa: E501
        if 'arquivo_dados' in params:
            local_var_files['arquivoDados'] = params['arquivo_dados']  # noqa: E501
        if 'anexo8' in params:
            local_var_files['anexo8'] = params['anexo8']  # noqa: E501
        if 'anexo4' in params:
            local_var_files['anexo4'] = params['anexo4']  # noqa: E501
        if 'anexo5' in params:
            local_var_files['anexo5'] = params['anexo5']  # noqa: E501
        if 'anexo3' in params:
            local_var_files['anexo3'] = params['anexo3']  # noqa: E501
        if 'anexo6' in params:
            local_var_files['anexo6'] = params['anexo6']  # noqa: E501
        if 'anexo7' in params:
            local_var_files['anexo7'] = params['anexo7']  # noqa: E501
        if 'anexo1' in params:
            local_var_files['anexo1'] = params['anexo1']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/sgi/intervencoes/importar-lote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RespostaUploadIntervencoesDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
