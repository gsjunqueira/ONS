# coding: utf-8

"""
    Integração com o SGI-OP

    Api de integração com os dados dos SGI-OP.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RespostaErroPadraoDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ind_erro': 'bool',
        'mensagem_erro': 'MensagemErroDto'
    }

    attribute_map = {
        'ind_erro': 'indErro',
        'mensagem_erro': 'mensagemErro'
    }

    def __init__(self, ind_erro=None, mensagem_erro=None):  # noqa: E501
        """RespostaErroPadraoDto - a model defined in Swagger"""  # noqa: E501
        self._ind_erro = None
        self._mensagem_erro = None
        self.discriminator = None
        self.ind_erro = ind_erro
        if mensagem_erro is not None:
            self.mensagem_erro = mensagem_erro

    @property
    def ind_erro(self):
        """Gets the ind_erro of this RespostaErroPadraoDto.  # noqa: E501

        Indica a existência de erro na resposta.  # noqa: E501

        :return: The ind_erro of this RespostaErroPadraoDto.  # noqa: E501
        :rtype: bool
        """
        return self._ind_erro

    @ind_erro.setter
    def ind_erro(self, ind_erro):
        """Sets the ind_erro of this RespostaErroPadraoDto.

        Indica a existência de erro na resposta.  # noqa: E501

        :param ind_erro: The ind_erro of this RespostaErroPadraoDto.  # noqa: E501
        :type: bool
        """
        if ind_erro is None:
            raise ValueError("Invalid value for `ind_erro`, must not be `None`")  # noqa: E501

        self._ind_erro = ind_erro

    @property
    def mensagem_erro(self):
        """Gets the mensagem_erro of this RespostaErroPadraoDto.  # noqa: E501


        :return: The mensagem_erro of this RespostaErroPadraoDto.  # noqa: E501
        :rtype: MensagemErroDto
        """
        return self._mensagem_erro

    @mensagem_erro.setter
    def mensagem_erro(self, mensagem_erro):
        """Sets the mensagem_erro of this RespostaErroPadraoDto.


        :param mensagem_erro: The mensagem_erro of this RespostaErroPadraoDto.  # noqa: E501
        :type: MensagemErroDto
        """

        self._mensagem_erro = mensagem_erro

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RespostaErroPadraoDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RespostaErroPadraoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
