# coding: utf-8

"""
    API Energia Agora

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sta-integracao-tec@ons.org.br
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntercambioInternacional(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'argentina': 'float',
        'paraguai': 'float',
        'uruguai': 'float'
    }

    attribute_map = {
        'argentina': 'argentina',
        'paraguai': 'paraguai',
        'uruguai': 'uruguai'
    }

    def __init__(self, argentina=None, paraguai=None, uruguai=None):  # noqa: E501
        """IntercambioInternacional - a model defined in Swagger"""  # noqa: E501
        self._argentina = None
        self._paraguai = None
        self._uruguai = None
        self.discriminator = None
        if argentina is not None:
            self.argentina = argentina
        if paraguai is not None:
            self.paraguai = paraguai
        if uruguai is not None:
            self.uruguai = uruguai

    @property
    def argentina(self):
        """Gets the argentina of this IntercambioInternacional.  # noqa: E501

        Intercâmbio Argentina em MW  # noqa: E501

        :return: The argentina of this IntercambioInternacional.  # noqa: E501
        :rtype: float
        """
        return self._argentina

    @argentina.setter
    def argentina(self, argentina):
        """Sets the argentina of this IntercambioInternacional.

        Intercâmbio Argentina em MW  # noqa: E501

        :param argentina: The argentina of this IntercambioInternacional.  # noqa: E501
        :type: float
        """

        self._argentina = argentina

    @property
    def paraguai(self):
        """Gets the paraguai of this IntercambioInternacional.  # noqa: E501

        Intercâmbio Paraguai em MW  # noqa: E501

        :return: The paraguai of this IntercambioInternacional.  # noqa: E501
        :rtype: float
        """
        return self._paraguai

    @paraguai.setter
    def paraguai(self, paraguai):
        """Sets the paraguai of this IntercambioInternacional.

        Intercâmbio Paraguai em MW  # noqa: E501

        :param paraguai: The paraguai of this IntercambioInternacional.  # noqa: E501
        :type: float
        """

        self._paraguai = paraguai

    @property
    def uruguai(self):
        """Gets the uruguai of this IntercambioInternacional.  # noqa: E501

        Intercâmbio Uruguai em MW  # noqa: E501

        :return: The uruguai of this IntercambioInternacional.  # noqa: E501
        :rtype: float
        """
        return self._uruguai

    @uruguai.setter
    def uruguai(self, uruguai):
        """Sets the uruguai of this IntercambioInternacional.

        Intercâmbio Uruguai em MW  # noqa: E501

        :param uruguai: The uruguai of this IntercambioInternacional.  # noqa: E501
        :type: float
        """

        self._uruguai = uruguai

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntercambioInternacional, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntercambioInternacional):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
