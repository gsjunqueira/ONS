# coding: utf-8

"""
    API Energia Agora

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sta-integracao-tec@ons.org.br
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalancoEnergetico(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'datetime',
        'sudeste_e_centro_oeste': 'SubsistemaSECO',
        'sul': 'Subsistema',
        'nordeste': 'Subsistema',
        'norte': 'Subsistema',
        'internacional': 'IntercambioInternacional',
        'intercambio': 'Intercambio'
    }

    attribute_map = {
        'data': 'Data',
        'sudeste_e_centro_oeste': 'sudesteECentroOeste',
        'sul': 'sul',
        'nordeste': 'nordeste',
        'norte': 'norte',
        'internacional': 'internacional',
        'intercambio': 'intercambio'
    }

    def __init__(self, data=None, sudeste_e_centro_oeste=None, sul=None, nordeste=None, norte=None, internacional=None, intercambio=None):  # noqa: E501
        """BalancoEnergetico - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._sudeste_e_centro_oeste = None
        self._sul = None
        self._nordeste = None
        self._norte = None
        self._internacional = None
        self._intercambio = None
        self.discriminator = None
        if data is not None:
            self.data = data
        if sudeste_e_centro_oeste is not None:
            self.sudeste_e_centro_oeste = sudeste_e_centro_oeste
        if sul is not None:
            self.sul = sul
        if nordeste is not None:
            self.nordeste = nordeste
        if norte is not None:
            self.norte = norte
        if internacional is not None:
            self.internacional = internacional
        if intercambio is not None:
            self.intercambio = intercambio

    @property
    def data(self):
        """Gets the data of this BalancoEnergetico.  # noqa: E501


        :return: The data of this BalancoEnergetico.  # noqa: E501
        :rtype: datetime
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BalancoEnergetico.


        :param data: The data of this BalancoEnergetico.  # noqa: E501
        :type: datetime
        """

        self._data = data

    @property
    def sudeste_e_centro_oeste(self):
        """Gets the sudeste_e_centro_oeste of this BalancoEnergetico.  # noqa: E501


        :return: The sudeste_e_centro_oeste of this BalancoEnergetico.  # noqa: E501
        :rtype: SubsistemaSECO
        """
        return self._sudeste_e_centro_oeste

    @sudeste_e_centro_oeste.setter
    def sudeste_e_centro_oeste(self, sudeste_e_centro_oeste):
        """Sets the sudeste_e_centro_oeste of this BalancoEnergetico.


        :param sudeste_e_centro_oeste: The sudeste_e_centro_oeste of this BalancoEnergetico.  # noqa: E501
        :type: SubsistemaSECO
        """

        self._sudeste_e_centro_oeste = sudeste_e_centro_oeste

    @property
    def sul(self):
        """Gets the sul of this BalancoEnergetico.  # noqa: E501


        :return: The sul of this BalancoEnergetico.  # noqa: E501
        :rtype: Subsistema
        """
        return self._sul

    @sul.setter
    def sul(self, sul):
        """Sets the sul of this BalancoEnergetico.


        :param sul: The sul of this BalancoEnergetico.  # noqa: E501
        :type: Subsistema
        """

        self._sul = sul

    @property
    def nordeste(self):
        """Gets the nordeste of this BalancoEnergetico.  # noqa: E501


        :return: The nordeste of this BalancoEnergetico.  # noqa: E501
        :rtype: Subsistema
        """
        return self._nordeste

    @nordeste.setter
    def nordeste(self, nordeste):
        """Sets the nordeste of this BalancoEnergetico.


        :param nordeste: The nordeste of this BalancoEnergetico.  # noqa: E501
        :type: Subsistema
        """

        self._nordeste = nordeste

    @property
    def norte(self):
        """Gets the norte of this BalancoEnergetico.  # noqa: E501


        :return: The norte of this BalancoEnergetico.  # noqa: E501
        :rtype: Subsistema
        """
        return self._norte

    @norte.setter
    def norte(self, norte):
        """Sets the norte of this BalancoEnergetico.


        :param norte: The norte of this BalancoEnergetico.  # noqa: E501
        :type: Subsistema
        """

        self._norte = norte

    @property
    def internacional(self):
        """Gets the internacional of this BalancoEnergetico.  # noqa: E501


        :return: The internacional of this BalancoEnergetico.  # noqa: E501
        :rtype: IntercambioInternacional
        """
        return self._internacional

    @internacional.setter
    def internacional(self, internacional):
        """Sets the internacional of this BalancoEnergetico.


        :param internacional: The internacional of this BalancoEnergetico.  # noqa: E501
        :type: IntercambioInternacional
        """

        self._internacional = internacional

    @property
    def intercambio(self):
        """Gets the intercambio of this BalancoEnergetico.  # noqa: E501


        :return: The intercambio of this BalancoEnergetico.  # noqa: E501
        :rtype: Intercambio
        """
        return self._intercambio

    @intercambio.setter
    def intercambio(self, intercambio):
        """Sets the intercambio of this BalancoEnergetico.


        :param intercambio: The intercambio of this BalancoEnergetico.  # noqa: E501
        :type: Intercambio
        """

        self._intercambio = intercambio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalancoEnergetico, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalancoEnergetico):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
