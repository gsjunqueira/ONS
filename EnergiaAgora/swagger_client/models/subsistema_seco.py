# coding: utf-8

"""
    API Energia Agora

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sta-integracao-tec@ons.org.br
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubsistemaSECO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geracao': 'GeracaoSECO',
        'carga_verificada': 'float',
        'importacao': 'float',
        'exportacao': 'float'
    }

    attribute_map = {
        'geracao': 'geracao',
        'carga_verificada': 'cargaVerificada',
        'importacao': 'importacao',
        'exportacao': 'exportacao'
    }

    def __init__(self, geracao=None, carga_verificada=None, importacao=None, exportacao=None):  # noqa: E501
        """SubsistemaSECO - a model defined in Swagger"""  # noqa: E501
        self._geracao = None
        self._carga_verificada = None
        self._importacao = None
        self._exportacao = None
        self.discriminator = None
        if geracao is not None:
            self.geracao = geracao
        if carga_verificada is not None:
            self.carga_verificada = carga_verificada
        if importacao is not None:
            self.importacao = importacao
        if exportacao is not None:
            self.exportacao = exportacao

    @property
    def geracao(self):
        """Gets the geracao of this SubsistemaSECO.  # noqa: E501


        :return: The geracao of this SubsistemaSECO.  # noqa: E501
        :rtype: GeracaoSECO
        """
        return self._geracao

    @geracao.setter
    def geracao(self, geracao):
        """Sets the geracao of this SubsistemaSECO.


        :param geracao: The geracao of this SubsistemaSECO.  # noqa: E501
        :type: GeracaoSECO
        """

        self._geracao = geracao

    @property
    def carga_verificada(self):
        """Gets the carga_verificada of this SubsistemaSECO.  # noqa: E501

        Carga Verificada em MW  # noqa: E501

        :return: The carga_verificada of this SubsistemaSECO.  # noqa: E501
        :rtype: float
        """
        return self._carga_verificada

    @carga_verificada.setter
    def carga_verificada(self, carga_verificada):
        """Sets the carga_verificada of this SubsistemaSECO.

        Carga Verificada em MW  # noqa: E501

        :param carga_verificada: The carga_verificada of this SubsistemaSECO.  # noqa: E501
        :type: float
        """

        self._carga_verificada = carga_verificada

    @property
    def importacao(self):
        """Gets the importacao of this SubsistemaSECO.  # noqa: E501

        Importação em MW  # noqa: E501

        :return: The importacao of this SubsistemaSECO.  # noqa: E501
        :rtype: float
        """
        return self._importacao

    @importacao.setter
    def importacao(self, importacao):
        """Sets the importacao of this SubsistemaSECO.

        Importação em MW  # noqa: E501

        :param importacao: The importacao of this SubsistemaSECO.  # noqa: E501
        :type: float
        """

        self._importacao = importacao

    @property
    def exportacao(self):
        """Gets the exportacao of this SubsistemaSECO.  # noqa: E501

        Exportação em MW  # noqa: E501

        :return: The exportacao of this SubsistemaSECO.  # noqa: E501
        :rtype: float
        """
        return self._exportacao

    @exportacao.setter
    def exportacao(self, exportacao):
        """Sets the exportacao of this SubsistemaSECO.

        Exportação em MW  # noqa: E501

        :param exportacao: The exportacao of this SubsistemaSECO.  # noqa: E501
        :type: float
        """

        self._exportacao = exportacao

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubsistemaSECO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubsistemaSECO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
