# coding: utf-8

"""
    API Energia Agora

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sta-integracao-tec@ons.org.br
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeracaoSECO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'float',
        'hidraulica': 'float',
        'termica': 'float',
        'eolica': 'float',
        'nuclear': 'float',
        'solar': 'float',
        'itaipu50_hz_brasil': 'float',
        'itaipu60_hz': 'float'
    }

    attribute_map = {
        'total': 'total',
        'hidraulica': 'hidraulica',
        'termica': 'termica',
        'eolica': 'eolica',
        'nuclear': 'nuclear',
        'solar': 'solar',
        'itaipu50_hz_brasil': 'itaipu50HzBrasil',
        'itaipu60_hz': 'itaipu60Hz'
    }

    def __init__(self, total=None, hidraulica=None, termica=None, eolica=None, nuclear=None, solar=None, itaipu50_hz_brasil=None, itaipu60_hz=None):  # noqa: E501
        """GeracaoSECO - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._hidraulica = None
        self._termica = None
        self._eolica = None
        self._nuclear = None
        self._solar = None
        self._itaipu50_hz_brasil = None
        self._itaipu60_hz = None
        self.discriminator = None
        if total is not None:
            self.total = total
        if hidraulica is not None:
            self.hidraulica = hidraulica
        if termica is not None:
            self.termica = termica
        if eolica is not None:
            self.eolica = eolica
        if nuclear is not None:
            self.nuclear = nuclear
        if solar is not None:
            self.solar = solar
        if itaipu50_hz_brasil is not None:
            self.itaipu50_hz_brasil = itaipu50_hz_brasil
        if itaipu60_hz is not None:
            self.itaipu60_hz = itaipu60_hz

    @property
    def total(self):
        """Gets the total of this GeracaoSECO.  # noqa: E501

        Geração total em MW  # noqa: E501

        :return: The total of this GeracaoSECO.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GeracaoSECO.

        Geração total em MW  # noqa: E501

        :param total: The total of this GeracaoSECO.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def hidraulica(self):
        """Gets the hidraulica of this GeracaoSECO.  # noqa: E501

        Geração hidraulica em MW  # noqa: E501

        :return: The hidraulica of this GeracaoSECO.  # noqa: E501
        :rtype: float
        """
        return self._hidraulica

    @hidraulica.setter
    def hidraulica(self, hidraulica):
        """Sets the hidraulica of this GeracaoSECO.

        Geração hidraulica em MW  # noqa: E501

        :param hidraulica: The hidraulica of this GeracaoSECO.  # noqa: E501
        :type: float
        """

        self._hidraulica = hidraulica

    @property
    def termica(self):
        """Gets the termica of this GeracaoSECO.  # noqa: E501

        Geração térmica em MW  # noqa: E501

        :return: The termica of this GeracaoSECO.  # noqa: E501
        :rtype: float
        """
        return self._termica

    @termica.setter
    def termica(self, termica):
        """Sets the termica of this GeracaoSECO.

        Geração térmica em MW  # noqa: E501

        :param termica: The termica of this GeracaoSECO.  # noqa: E501
        :type: float
        """

        self._termica = termica

    @property
    def eolica(self):
        """Gets the eolica of this GeracaoSECO.  # noqa: E501

        Geração eolica em MW  # noqa: E501

        :return: The eolica of this GeracaoSECO.  # noqa: E501
        :rtype: float
        """
        return self._eolica

    @eolica.setter
    def eolica(self, eolica):
        """Sets the eolica of this GeracaoSECO.

        Geração eolica em MW  # noqa: E501

        :param eolica: The eolica of this GeracaoSECO.  # noqa: E501
        :type: float
        """

        self._eolica = eolica

    @property
    def nuclear(self):
        """Gets the nuclear of this GeracaoSECO.  # noqa: E501

        Geração nuclear em MW  # noqa: E501

        :return: The nuclear of this GeracaoSECO.  # noqa: E501
        :rtype: float
        """
        return self._nuclear

    @nuclear.setter
    def nuclear(self, nuclear):
        """Sets the nuclear of this GeracaoSECO.

        Geração nuclear em MW  # noqa: E501

        :param nuclear: The nuclear of this GeracaoSECO.  # noqa: E501
        :type: float
        """

        self._nuclear = nuclear

    @property
    def solar(self):
        """Gets the solar of this GeracaoSECO.  # noqa: E501

        Geração solar em MW  # noqa: E501

        :return: The solar of this GeracaoSECO.  # noqa: E501
        :rtype: float
        """
        return self._solar

    @solar.setter
    def solar(self, solar):
        """Sets the solar of this GeracaoSECO.

        Geração solar em MW  # noqa: E501

        :param solar: The solar of this GeracaoSECO.  # noqa: E501
        :type: float
        """

        self._solar = solar

    @property
    def itaipu50_hz_brasil(self):
        """Gets the itaipu50_hz_brasil of this GeracaoSECO.  # noqa: E501

        Geração Itaipu 50Hz Brasil em MW  # noqa: E501

        :return: The itaipu50_hz_brasil of this GeracaoSECO.  # noqa: E501
        :rtype: float
        """
        return self._itaipu50_hz_brasil

    @itaipu50_hz_brasil.setter
    def itaipu50_hz_brasil(self, itaipu50_hz_brasil):
        """Sets the itaipu50_hz_brasil of this GeracaoSECO.

        Geração Itaipu 50Hz Brasil em MW  # noqa: E501

        :param itaipu50_hz_brasil: The itaipu50_hz_brasil of this GeracaoSECO.  # noqa: E501
        :type: float
        """

        self._itaipu50_hz_brasil = itaipu50_hz_brasil

    @property
    def itaipu60_hz(self):
        """Gets the itaipu60_hz of this GeracaoSECO.  # noqa: E501

        Geração Itaipu 60Hz em MW  # noqa: E501

        :return: The itaipu60_hz of this GeracaoSECO.  # noqa: E501
        :rtype: float
        """
        return self._itaipu60_hz

    @itaipu60_hz.setter
    def itaipu60_hz(self, itaipu60_hz):
        """Sets the itaipu60_hz of this GeracaoSECO.

        Geração Itaipu 60Hz em MW  # noqa: E501

        :param itaipu60_hz: The itaipu60_hz of this GeracaoSECO.  # noqa: E501
        :type: float
        """

        self._itaipu60_hz = itaipu60_hz

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeracaoSECO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeracaoSECO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
