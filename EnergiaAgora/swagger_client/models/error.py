# coding: utf-8

"""
    API Energia Agora

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sta-integracao-tec@ons.org.br
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Error(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_error': 'bool',
        'error_stack': 'object',
        'message_id': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'has_error': 'hasError',
        'error_stack': 'errorStack',
        'message_id': 'messageId',
        'error_message': 'errorMessage'
    }

    def __init__(self, has_error=None, error_stack=None, message_id=None, error_message=None):  # noqa: E501
        """Error - a model defined in Swagger"""  # noqa: E501
        self._has_error = None
        self._error_stack = None
        self._message_id = None
        self._error_message = None
        self.discriminator = None
        if has_error is not None:
            self.has_error = has_error
        if error_stack is not None:
            self.error_stack = error_stack
        if message_id is not None:
            self.message_id = message_id
        if error_message is not None:
            self.error_message = error_message

    @property
    def has_error(self):
        """Gets the has_error of this Error.  # noqa: E501


        :return: The has_error of this Error.  # noqa: E501
        :rtype: bool
        """
        return self._has_error

    @has_error.setter
    def has_error(self, has_error):
        """Sets the has_error of this Error.


        :param has_error: The has_error of this Error.  # noqa: E501
        :type: bool
        """

        self._has_error = has_error

    @property
    def error_stack(self):
        """Gets the error_stack of this Error.  # noqa: E501


        :return: The error_stack of this Error.  # noqa: E501
        :rtype: object
        """
        return self._error_stack

    @error_stack.setter
    def error_stack(self, error_stack):
        """Sets the error_stack of this Error.


        :param error_stack: The error_stack of this Error.  # noqa: E501
        :type: object
        """

        self._error_stack = error_stack

    @property
    def message_id(self):
        """Gets the message_id of this Error.  # noqa: E501


        :return: The message_id of this Error.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this Error.


        :param message_id: The message_id of this Error.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def error_message(self):
        """Gets the error_message of this Error.  # noqa: E501


        :return: The error_message of this Error.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Error.


        :param error_message: The error_message of this Error.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Error, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
