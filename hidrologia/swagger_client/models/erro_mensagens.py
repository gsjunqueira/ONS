# coding: utf-8

"""
    Hidrologia

    API que fornece dados hidrol√≥gicos  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ErroMensagens(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severidade': 'str',
        'mensagem': 'str',
        'detalhes': 'str'
    }

    attribute_map = {
        'severidade': 'Severidade',
        'mensagem': 'Mensagem',
        'detalhes': 'Detalhes'
    }

    def __init__(self, severidade=None, mensagem=None, detalhes=None):  # noqa: E501
        """ErroMensagens - a model defined in Swagger"""  # noqa: E501
        self._severidade = None
        self._mensagem = None
        self._detalhes = None
        self.discriminator = None
        if severidade is not None:
            self.severidade = severidade
        if mensagem is not None:
            self.mensagem = mensagem
        if detalhes is not None:
            self.detalhes = detalhes

    @property
    def severidade(self):
        """Gets the severidade of this ErroMensagens.  # noqa: E501

        Severidade do Erro  # noqa: E501

        :return: The severidade of this ErroMensagens.  # noqa: E501
        :rtype: str
        """
        return self._severidade

    @severidade.setter
    def severidade(self, severidade):
        """Sets the severidade of this ErroMensagens.

        Severidade do Erro  # noqa: E501

        :param severidade: The severidade of this ErroMensagens.  # noqa: E501
        :type: str
        """

        self._severidade = severidade

    @property
    def mensagem(self):
        """Gets the mensagem of this ErroMensagens.  # noqa: E501

        Mensagem do Erro  # noqa: E501

        :return: The mensagem of this ErroMensagens.  # noqa: E501
        :rtype: str
        """
        return self._mensagem

    @mensagem.setter
    def mensagem(self, mensagem):
        """Sets the mensagem of this ErroMensagens.

        Mensagem do Erro  # noqa: E501

        :param mensagem: The mensagem of this ErroMensagens.  # noqa: E501
        :type: str
        """

        self._mensagem = mensagem

    @property
    def detalhes(self):
        """Gets the detalhes of this ErroMensagens.  # noqa: E501

        Detalhes do Erro  # noqa: E501

        :return: The detalhes of this ErroMensagens.  # noqa: E501
        :rtype: str
        """
        return self._detalhes

    @detalhes.setter
    def detalhes(self, detalhes):
        """Sets the detalhes of this ErroMensagens.

        Detalhes do Erro  # noqa: E501

        :param detalhes: The detalhes of this ErroMensagens.  # noqa: E501
        :type: str
        """

        self._detalhes = detalhes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErroMensagens, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErroMensagens):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
