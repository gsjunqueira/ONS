# coding: utf-8

"""
    Hidrologia

    API que fornece dados hidrológicos  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GrandezasVerificadasApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_afluencia_reservatorio(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_afluencia_reservatorio  # noqa: E501

        Obter os valores de vazao afluente () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_afluencia_reservatorio(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_afluencia_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_afluencia_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
            return data

    def get_afluencia_reservatorio_with_http_info(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_afluencia_reservatorio  # noqa: E501

        Obter os valores de vazao afluente () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_afluencia_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'identificador', 'inicio', 'fim', 'intervalo', 'origem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_afluencia_reservatorio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_afluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_afluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'identificador' is set
        if ('identificador' not in params or
                params['identificador'] is None):
            raise ValueError("Missing the required parameter `identificador` when calling `get_afluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `get_afluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `get_afluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'intervalo' is set
        if ('intervalo' not in params or
                params['intervalo'] is None):
            raise ValueError("Missing the required parameter `intervalo` when calling `get_afluencia_reservatorio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador' in params:
            path_params['Identificador'] = params['identificador']  # noqa: E501

        query_params = []
        if 'inicio' in params:
            query_params.append(('Inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('Fim', params['fim']))  # noqa: E501
        if 'intervalo' in params:
            query_params.append(('Intervalo', params['intervalo']))  # noqa: E501
        if 'origem' in params:
            query_params.append(('Origem', params['origem']))  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/reservatorios/{Identificador}/afluencia', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoConsultaGrandezaPaginada',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_defluencia_reservatorio(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_defluencia_reservatorio  # noqa: E501

        Obter os valores de defluencia (m3/s) do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_defluencia_reservatorio(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_defluencia_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_defluencia_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
            return data

    def get_defluencia_reservatorio_with_http_info(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_defluencia_reservatorio  # noqa: E501

        Obter os valores de defluencia (m3/s) do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_defluencia_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'identificador', 'inicio', 'fim', 'intervalo', 'origem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_defluencia_reservatorio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_defluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_defluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'identificador' is set
        if ('identificador' not in params or
                params['identificador'] is None):
            raise ValueError("Missing the required parameter `identificador` when calling `get_defluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `get_defluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `get_defluencia_reservatorio`")  # noqa: E501
        # verify the required parameter 'intervalo' is set
        if ('intervalo' not in params or
                params['intervalo'] is None):
            raise ValueError("Missing the required parameter `intervalo` when calling `get_defluencia_reservatorio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador' in params:
            path_params['Identificador'] = params['identificador']  # noqa: E501

        query_params = []
        if 'inicio' in params:
            query_params.append(('Inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('Fim', params['fim']))  # noqa: E501
        if 'intervalo' in params:
            query_params.append(('Intervalo', params['intervalo']))  # noqa: E501
        if 'origem' in params:
            query_params.append(('Origem', params['origem']))  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/reservatorios/{Identificador}/defluencia', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoConsultaGrandezaPaginada',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_energia_turbinavel_reservatorio(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_energia_turbinavel_reservatorio  # noqa: E501

        Obter os valores de vazao transferida () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_energia_turbinavel_reservatorio(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_energia_turbinavel_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_energia_turbinavel_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
            return data

    def get_energia_turbinavel_reservatorio_with_http_info(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_energia_turbinavel_reservatorio  # noqa: E501

        Obter os valores de vazao transferida () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_energia_turbinavel_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'identificador', 'inicio', 'fim', 'intervalo', 'origem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_energia_turbinavel_reservatorio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_energia_turbinavel_reservatorio`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_energia_turbinavel_reservatorio`")  # noqa: E501
        # verify the required parameter 'identificador' is set
        if ('identificador' not in params or
                params['identificador'] is None):
            raise ValueError("Missing the required parameter `identificador` when calling `get_energia_turbinavel_reservatorio`")  # noqa: E501
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `get_energia_turbinavel_reservatorio`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `get_energia_turbinavel_reservatorio`")  # noqa: E501
        # verify the required parameter 'intervalo' is set
        if ('intervalo' not in params or
                params['intervalo'] is None):
            raise ValueError("Missing the required parameter `intervalo` when calling `get_energia_turbinavel_reservatorio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador' in params:
            path_params['Identificador'] = params['identificador']  # noqa: E501

        query_params = []
        if 'inicio' in params:
            query_params.append(('Inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('Fim', params['fim']))  # noqa: E501
        if 'intervalo' in params:
            query_params.append(('Intervalo', params['intervalo']))  # noqa: E501
        if 'origem' in params:
            query_params.append(('Origem', params['origem']))  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/reservatorios/{Identificador}/energiaTurbinavel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoConsultaGrandezaPaginada',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nivel_jusante_reservatorio(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_nivel_jusante_reservatorio  # noqa: E501

        Obter os valores de nivel de jusante () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nivel_jusante_reservatorio(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nivel_jusante_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nivel_jusante_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
            return data

    def get_nivel_jusante_reservatorio_with_http_info(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_nivel_jusante_reservatorio  # noqa: E501

        Obter os valores de nivel de jusante () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nivel_jusante_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'identificador', 'inicio', 'fim', 'intervalo', 'origem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nivel_jusante_reservatorio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_nivel_jusante_reservatorio`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_nivel_jusante_reservatorio`")  # noqa: E501
        # verify the required parameter 'identificador' is set
        if ('identificador' not in params or
                params['identificador'] is None):
            raise ValueError("Missing the required parameter `identificador` when calling `get_nivel_jusante_reservatorio`")  # noqa: E501
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `get_nivel_jusante_reservatorio`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `get_nivel_jusante_reservatorio`")  # noqa: E501
        # verify the required parameter 'intervalo' is set
        if ('intervalo' not in params or
                params['intervalo'] is None):
            raise ValueError("Missing the required parameter `intervalo` when calling `get_nivel_jusante_reservatorio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador' in params:
            path_params['Identificador'] = params['identificador']  # noqa: E501

        query_params = []
        if 'inicio' in params:
            query_params.append(('Inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('Fim', params['fim']))  # noqa: E501
        if 'intervalo' in params:
            query_params.append(('Intervalo', params['intervalo']))  # noqa: E501
        if 'origem' in params:
            query_params.append(('Origem', params['origem']))  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/reservatorios/{Identificador}/nivelJusante', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoConsultaGrandezaPaginada',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nivel_montante_reservatorio(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_nivel_montante_reservatorio  # noqa: E501

        Obter os valores de nivel de montante () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nivel_montante_reservatorio(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nivel_montante_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nivel_montante_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
            return data

    def get_nivel_montante_reservatorio_with_http_info(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_nivel_montante_reservatorio  # noqa: E501

        Obter os valores de nivel de montante () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nivel_montante_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'identificador', 'inicio', 'fim', 'intervalo', 'origem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nivel_montante_reservatorio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_nivel_montante_reservatorio`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_nivel_montante_reservatorio`")  # noqa: E501
        # verify the required parameter 'identificador' is set
        if ('identificador' not in params or
                params['identificador'] is None):
            raise ValueError("Missing the required parameter `identificador` when calling `get_nivel_montante_reservatorio`")  # noqa: E501
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `get_nivel_montante_reservatorio`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `get_nivel_montante_reservatorio`")  # noqa: E501
        # verify the required parameter 'intervalo' is set
        if ('intervalo' not in params or
                params['intervalo'] is None):
            raise ValueError("Missing the required parameter `intervalo` when calling `get_nivel_montante_reservatorio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador' in params:
            path_params['Identificador'] = params['identificador']  # noqa: E501

        query_params = []
        if 'inicio' in params:
            query_params.append(('Inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('Fim', params['fim']))  # noqa: E501
        if 'intervalo' in params:
            query_params.append(('Intervalo', params['intervalo']))  # noqa: E501
        if 'origem' in params:
            query_params.append(('Origem', params['origem']))  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/reservatorios/{Identificador}/nivelMontante', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoConsultaGrandezaPaginada',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vazao_outras_estruturas_reservatorio(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_vazao_outras_estruturas_reservatorio  # noqa: E501

        Obter os valores de vazao de outras estruturas () do reservatorio (máx 7 dias) no periodo e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vazao_outras_estruturas_reservatorio(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vazao_outras_estruturas_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vazao_outras_estruturas_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
            return data

    def get_vazao_outras_estruturas_reservatorio_with_http_info(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_vazao_outras_estruturas_reservatorio  # noqa: E501

        Obter os valores de vazao de outras estruturas () do reservatorio (máx 7 dias) no periodo e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vazao_outras_estruturas_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'identificador', 'inicio', 'fim', 'intervalo', 'origem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vazao_outras_estruturas_reservatorio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_vazao_outras_estruturas_reservatorio`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_vazao_outras_estruturas_reservatorio`")  # noqa: E501
        # verify the required parameter 'identificador' is set
        if ('identificador' not in params or
                params['identificador'] is None):
            raise ValueError("Missing the required parameter `identificador` when calling `get_vazao_outras_estruturas_reservatorio`")  # noqa: E501
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `get_vazao_outras_estruturas_reservatorio`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `get_vazao_outras_estruturas_reservatorio`")  # noqa: E501
        # verify the required parameter 'intervalo' is set
        if ('intervalo' not in params or
                params['intervalo'] is None):
            raise ValueError("Missing the required parameter `intervalo` when calling `get_vazao_outras_estruturas_reservatorio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador' in params:
            path_params['Identificador'] = params['identificador']  # noqa: E501

        query_params = []
        if 'inicio' in params:
            query_params.append(('Inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('Fim', params['fim']))  # noqa: E501
        if 'intervalo' in params:
            query_params.append(('Intervalo', params['intervalo']))  # noqa: E501
        if 'origem' in params:
            query_params.append(('Origem', params['origem']))  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/reservatorios/{Identificador}/vazaoOutrasEstruturas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoConsultaGrandezaPaginada',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vazao_turbinada_reservatorio(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_vazao_turbinada_reservatorio  # noqa: E501

        Obter os valores de vazao turbinada () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vazao_turbinada_reservatorio(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vazao_turbinada_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vazao_turbinada_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
            return data

    def get_vazao_turbinada_reservatorio_with_http_info(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_vazao_turbinada_reservatorio  # noqa: E501

        Obter os valores de vazao turbinada () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vazao_turbinada_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'identificador', 'inicio', 'fim', 'intervalo', 'origem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vazao_turbinada_reservatorio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_vazao_turbinada_reservatorio`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_vazao_turbinada_reservatorio`")  # noqa: E501
        # verify the required parameter 'identificador' is set
        if ('identificador' not in params or
                params['identificador'] is None):
            raise ValueError("Missing the required parameter `identificador` when calling `get_vazao_turbinada_reservatorio`")  # noqa: E501
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `get_vazao_turbinada_reservatorio`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `get_vazao_turbinada_reservatorio`")  # noqa: E501
        # verify the required parameter 'intervalo' is set
        if ('intervalo' not in params or
                params['intervalo'] is None):
            raise ValueError("Missing the required parameter `intervalo` when calling `get_vazao_turbinada_reservatorio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador' in params:
            path_params['Identificador'] = params['identificador']  # noqa: E501

        query_params = []
        if 'inicio' in params:
            query_params.append(('Inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('Fim', params['fim']))  # noqa: E501
        if 'intervalo' in params:
            query_params.append(('Intervalo', params['intervalo']))  # noqa: E501
        if 'origem' in params:
            query_params.append(('Origem', params['origem']))  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/reservatorios/{Identificador}/vazaoTurbinada', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoConsultaGrandezaPaginada',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vazao_vertida_reservatorio(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_vazao_vertida_reservatorio  # noqa: E501

        Obter os valores de vazao vertida () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vazao_vertida_reservatorio(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vazao_vertida_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vazao_vertida_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
            return data

    def get_vazao_vertida_reservatorio_with_http_info(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_vazao_vertida_reservatorio  # noqa: E501

        Obter os valores de vazao vertida () do reservatorio no periodo (máx 7 dias) e intervalo definidos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vazao_vertida_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'identificador', 'inicio', 'fim', 'intervalo', 'origem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vazao_vertida_reservatorio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_vazao_vertida_reservatorio`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_vazao_vertida_reservatorio`")  # noqa: E501
        # verify the required parameter 'identificador' is set
        if ('identificador' not in params or
                params['identificador'] is None):
            raise ValueError("Missing the required parameter `identificador` when calling `get_vazao_vertida_reservatorio`")  # noqa: E501
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `get_vazao_vertida_reservatorio`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `get_vazao_vertida_reservatorio`")  # noqa: E501
        # verify the required parameter 'intervalo' is set
        if ('intervalo' not in params or
                params['intervalo'] is None):
            raise ValueError("Missing the required parameter `intervalo` when calling `get_vazao_vertida_reservatorio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador' in params:
            path_params['Identificador'] = params['identificador']  # noqa: E501

        query_params = []
        if 'inicio' in params:
            query_params.append(('Inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('Fim', params['fim']))  # noqa: E501
        if 'intervalo' in params:
            query_params.append(('Intervalo', params['intervalo']))  # noqa: E501
        if 'origem' in params:
            query_params.append(('Origem', params['origem']))  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/reservatorios/{Identificador}/vazaoVertida', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoConsultaGrandezaPaginada',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_util_reservatorio(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_volume_util_reservatorio  # noqa: E501

        Obter os valores de volume util () do reservatorio no periodo e intervalo definidos (máx 7 dias)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_util_reservatorio(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_util_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_util_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs)  # noqa: E501
            return data

    def get_volume_util_reservatorio_with_http_info(self, pagina, quantidade, identificador, inicio, fim, intervalo, **kwargs):  # noqa: E501
        """get_volume_util_reservatorio  # noqa: E501

        Obter os valores de volume util () do reservatorio no periodo e intervalo definidos (máx 7 dias)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_util_reservatorio_with_http_info(pagina, quantidade, identificador, inicio, fim, intervalo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Pagina corrente (required)
        :param int quantidade: Quantidade de resultados por pagina (limitado a 240 itens por página) (required)
        :param str identificador: Identificador do Reservatorio (required)
        :param str inicio: Data de inicio do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str fim: Data de fim do periodo (AAAA-MM-DD HH:mm:ss) (required)
        :param str intervalo: Intervalo de consolidacao dos dados (HO ou DI) (required)
        :param str origem: Origem dos dados (TRL, SSC, FTP ou ATR) <li>TRL – Tempo Real <li>SSC – Tempo Real Lido do Sistema de Supervisão <li>FTP – Tempo Real Lido do Servidor FTP <li>ATR – Valor atribuído.
        :return: ResultadoConsultaGrandezaPaginada
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'identificador', 'inicio', 'fim', 'intervalo', 'origem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_util_reservatorio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_volume_util_reservatorio`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_volume_util_reservatorio`")  # noqa: E501
        # verify the required parameter 'identificador' is set
        if ('identificador' not in params or
                params['identificador'] is None):
            raise ValueError("Missing the required parameter `identificador` when calling `get_volume_util_reservatorio`")  # noqa: E501
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `get_volume_util_reservatorio`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `get_volume_util_reservatorio`")  # noqa: E501
        # verify the required parameter 'intervalo' is set
        if ('intervalo' not in params or
                params['intervalo'] is None):
            raise ValueError("Missing the required parameter `intervalo` when calling `get_volume_util_reservatorio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identificador' in params:
            path_params['Identificador'] = params['identificador']  # noqa: E501

        query_params = []
        if 'inicio' in params:
            query_params.append(('Inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('Fim', params['fim']))  # noqa: E501
        if 'intervalo' in params:
            query_params.append(('Intervalo', params['intervalo']))  # noqa: E501
        if 'origem' in params:
            query_params.append(('Origem', params['origem']))  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/reservatorios/{Identificador}/volumeUtil', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultadoConsultaGrandezaPaginada',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
