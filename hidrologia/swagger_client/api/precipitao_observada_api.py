# coding: utf-8

"""
    Hidrologia

    API que fornece dados hidrológicos  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PrecipitaoObservadaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_precipitacao_observada(self, pagina, quantidade, id_estacao_meteo, data_inicial_medicao, data_final_medicao, qualidade_dado, agregacao_temporal, furo_temporal, **kwargs):  # noqa: E501
        """get_precipitacao_observada  # noqa: E501

        Obter lista de precipitações observadas  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_precipitacao_observada(pagina, quantidade, id_estacao_meteo, data_inicial_medicao, data_final_medicao, qualidade_dado, agregacao_temporal, furo_temporal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Página corrente (required)
        :param int quantidade: Quantidade de resultados por página (required)
        :param str id_estacao_meteo: Lista de IDs das Estações Meteorológica, é necessário informar no mínimo um ID (required)
        :param date data_inicial_medicao: Data inicial do período de Medição no formato dd/mm/aaaa (required)
        :param date data_final_medicao: Data final do período de Medição no formato dd/mm/aaaa (required)
        :param list[str] qualidade_dado: Informar a Qualidade do Dado, se deseja dados Consistidos e/ou Consolidados. (required)
        :param list[str] agregacao_temporal: Informar a Agregação Temporal, se deseja Diária ou Horária. (required)
        :param list[str] furo_temporal: Informar se deseja retornar Furo Temporal. (required)
        :return: PrecipacaoObservadaResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_precipitacao_observada_with_http_info(pagina, quantidade, id_estacao_meteo, data_inicial_medicao, data_final_medicao, qualidade_dado, agregacao_temporal, furo_temporal, **kwargs)  # noqa: E501
        else:
            (data) = self.get_precipitacao_observada_with_http_info(pagina, quantidade, id_estacao_meteo, data_inicial_medicao, data_final_medicao, qualidade_dado, agregacao_temporal, furo_temporal, **kwargs)  # noqa: E501
            return data

    def get_precipitacao_observada_with_http_info(self, pagina, quantidade, id_estacao_meteo, data_inicial_medicao, data_final_medicao, qualidade_dado, agregacao_temporal, furo_temporal, **kwargs):  # noqa: E501
        """get_precipitacao_observada  # noqa: E501

        Obter lista de precipitações observadas  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_precipitacao_observada_with_http_info(pagina, quantidade, id_estacao_meteo, data_inicial_medicao, data_final_medicao, qualidade_dado, agregacao_temporal, furo_temporal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pagina: Página corrente (required)
        :param int quantidade: Quantidade de resultados por página (required)
        :param str id_estacao_meteo: Lista de IDs das Estações Meteorológica, é necessário informar no mínimo um ID (required)
        :param date data_inicial_medicao: Data inicial do período de Medição no formato dd/mm/aaaa (required)
        :param date data_final_medicao: Data final do período de Medição no formato dd/mm/aaaa (required)
        :param list[str] qualidade_dado: Informar a Qualidade do Dado, se deseja dados Consistidos e/ou Consolidados. (required)
        :param list[str] agregacao_temporal: Informar a Agregação Temporal, se deseja Diária ou Horária. (required)
        :param list[str] furo_temporal: Informar se deseja retornar Furo Temporal. (required)
        :return: PrecipacaoObservadaResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagina', 'quantidade', 'id_estacao_meteo', 'data_inicial_medicao', 'data_final_medicao', 'qualidade_dado', 'agregacao_temporal', 'furo_temporal']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_precipitacao_observada" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pagina' is set
        if ('pagina' not in params or
                params['pagina'] is None):
            raise ValueError("Missing the required parameter `pagina` when calling `get_precipitacao_observada`")  # noqa: E501
        # verify the required parameter 'quantidade' is set
        if ('quantidade' not in params or
                params['quantidade'] is None):
            raise ValueError("Missing the required parameter `quantidade` when calling `get_precipitacao_observada`")  # noqa: E501
        # verify the required parameter 'id_estacao_meteo' is set
        if ('id_estacao_meteo' not in params or
                params['id_estacao_meteo'] is None):
            raise ValueError("Missing the required parameter `id_estacao_meteo` when calling `get_precipitacao_observada`")  # noqa: E501
        # verify the required parameter 'data_inicial_medicao' is set
        if ('data_inicial_medicao' not in params or
                params['data_inicial_medicao'] is None):
            raise ValueError("Missing the required parameter `data_inicial_medicao` when calling `get_precipitacao_observada`")  # noqa: E501
        # verify the required parameter 'data_final_medicao' is set
        if ('data_final_medicao' not in params or
                params['data_final_medicao'] is None):
            raise ValueError("Missing the required parameter `data_final_medicao` when calling `get_precipitacao_observada`")  # noqa: E501
        # verify the required parameter 'qualidade_dado' is set
        if ('qualidade_dado' not in params or
                params['qualidade_dado'] is None):
            raise ValueError("Missing the required parameter `qualidade_dado` when calling `get_precipitacao_observada`")  # noqa: E501
        # verify the required parameter 'agregacao_temporal' is set
        if ('agregacao_temporal' not in params or
                params['agregacao_temporal'] is None):
            raise ValueError("Missing the required parameter `agregacao_temporal` when calling `get_precipitacao_observada`")  # noqa: E501
        # verify the required parameter 'furo_temporal' is set
        if ('furo_temporal' not in params or
                params['furo_temporal'] is None):
            raise ValueError("Missing the required parameter `furo_temporal` when calling `get_precipitacao_observada`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_estacao_meteo' in params:
            query_params.append(('IDEstacaoMeteo', params['id_estacao_meteo']))  # noqa: E501
        if 'data_inicial_medicao' in params:
            query_params.append(('DataInicialMedicao', params['data_inicial_medicao']))  # noqa: E501
        if 'data_final_medicao' in params:
            query_params.append(('DataFinalMedicao', params['data_final_medicao']))  # noqa: E501
        if 'qualidade_dado' in params:
            query_params.append(('QualidadeDado', params['qualidade_dado']))  # noqa: E501
            collection_formats['QualidadeDado'] = 'csv'  # noqa: E501
        if 'agregacao_temporal' in params:
            query_params.append(('AgregacaoTemporal', params['agregacao_temporal']))  # noqa: E501
            collection_formats['AgregacaoTemporal'] = 'csv'  # noqa: E501
        if 'furo_temporal' in params:
            query_params.append(('FuroTemporal', params['furo_temporal']))  # noqa: E501
            collection_formats['FuroTemporal'] = 'csv'  # noqa: E501

        header_params = {}
        if 'pagina' in params:
            header_params['Pagina'] = params['pagina']  # noqa: E501
        if 'quantidade' in params:
            header_params['Quantidade'] = params['quantidade']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/hidrologia/PrecipitacaoObservada', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrecipacaoObservadaResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
